name: Performance Monitoring

on:
  schedule:
    # Run every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
  deployment_status:

permissions:
  issues: write
  contents: read

env:
  NODE_VERSION: '18.19.0'
  PRODUCTION_URL: 'https://wikigaialab.vercel.app'

jobs:
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check Lighthouse config
        run: |
          if [ -f ".lighthouserc.json" ]; then
            echo "Lighthouse config found:"
            cat .lighthouserc.json
          else
            echo "Warning: No .lighthouserc.json found"
          fi

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: lighthouse-audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8'

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and analyze
        env:
          ANALYZE: true
        run: |
          cd apps/web
          echo "Building with bundle analysis..."
          echo "ANALYZE environment variable: $ANALYZE"
          pnpm run analyze
          echo "Build completed with exit code: $?"
          
      - name: Check bundle analysis output
        run: |
          cd apps/web
          if [ -d ".next/analyze" ]; then
            echo "Bundle analysis output found:"
            ls -la .next/analyze/ || true
            echo "Files in analyze directory:"
            find .next/analyze/ -type f | head -10 || true
          else
            echo "No analyze directory found. Creating fallback..."
            mkdir -p .next/analyze
            echo "Bundle analysis failed - no output generated at $(date)" > .next/analyze/bundle-analysis-error.txt
            echo "Build logs:" >> .next/analyze/bundle-analysis-error.txt
            echo "ANALYZE environment variable: ${ANALYZE:-not set}" >> .next/analyze/bundle-analysis-error.txt
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: apps/web/.next/analyze/
          if-no-files-found: warn
          retention-days: 7

  uptime-monitoring:
    name: Uptime Check
    runs-on: ubuntu-latest
    # Skip uptime check in forks to prevent failures
    if: github.repository == 'wikigaialab/wikigaialab' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check production uptime
        run: |
          # Use environment variable
          PRODUCTION_URL="${{ env.PRODUCTION_URL }}"
          echo "Checking uptime for: $PRODUCTION_URL"
          
          urls=(
            "$PRODUCTION_URL"
            "$PRODUCTION_URL/api/health"
            "$PRODUCTION_URL/problems"
            "$PRODUCTION_URL/apps"
            "$PRODUCTION_URL/dashboard"
          )
          
          failed_urls=()
          
          for url in "${urls[@]}"; do
            echo "Checking $url..."
            # Get HTTP status code with better error handling
            http_code=$(curl -s --retry 3 --retry-delay 5 --max-time 30 -w "%{http_code}" -o /dev/null "$url" || echo "000")
            echo "HTTP Status: $http_code"
            
            # Check if status code is 2xx or 3xx
            if [[ "$http_code" =~ ^[23][0-9][0-9]$ ]]; then
              echo "✅ $url is up (status: $http_code)"
            else
              echo "❌ $url is down or unhealthy (status: $http_code)"
              failed_urls+=("$url")
            fi
          done
          
          if [ ${#failed_urls[@]} -gt 0 ]; then
            echo "Failed URLs: ${failed_urls[*]}"
            exit 1
          else
            echo "All URLs are healthy! 🎉"
          fi

      - name: Create uptime issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Website Downtime Detected',
              body: `## 🚨 Website Downtime Alert
              
              Our uptime monitoring detected that the website is not responding.
              
              **Time**: ${new Date().toISOString()}
              **Status**: Down ❌
              
              ### 🔍 Investigation Steps
              1. Check server status
              2. Review recent deployments
              3. Check DNS resolution
              4. Verify SSL certificates
              
              ### 📞 Immediate Actions
              - [ ] Investigate server logs
              - [ ] Check database connectivity
              - [ ] Review CDN status
              - [ ] Notify stakeholders if needed
              
              ---
              *This issue was created automatically by the uptime monitoring workflow.*`,
              labels: ['critical', 'outage', 'monitoring']
            });

  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, bundle-analysis]
    if: github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm add -g @lhci/cli puppeteer

      - name: Run performance tests
        run: |
          PRODUCTION_URL="${{ env.PRODUCTION_URL }}"
          lhci autorun --collect.url="$PRODUCTION_URL"
          lhci autorun --collect.url="$PRODUCTION_URL/problems"

      - name: Analyze performance changes
        run: |
          echo "## 📊 Performance Analysis" > performance-report.md
          echo "Generated on: $(date)" >> performance-report.md
          echo "" >> performance-report.md
          
          # This would compare with previous results
          # For now, we'll just record the current metrics
          echo "Latest performance metrics recorded." >> performance-report.md

      - name: Create performance issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📉 Performance Regression Detected',
              body: `## 📉 Performance Regression Alert
              
              Performance monitoring has detected a potential regression after the latest deployment.
              
              ### 🔍 Details
              - **Deployment**: ${context.sha}
              - **Time**: ${new Date().toISOString()}
              - **Environment**: Production
              
              ### 📋 Review Checklist
              - [ ] Compare Lighthouse scores
              - [ ] Check bundle size changes
              - [ ] Review recent code changes
              - [ ] Test on different devices/networks
              
              ### 🔧 Potential Fixes
              - [ ] Optimize images
              - [ ] Reduce bundle size
              - [ ] Improve caching
              - [ ] Optimize database queries
              
              ---
              *This issue was created automatically by the performance monitoring workflow.*`,
              labels: ['performance', 'regression', 'monitoring']
            });