name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18.19.0'
  PNPM_VERSION: '8'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format. Use semantic versioning (e.g., v1.0.0)"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        run: |
          pnpm run build
          pnpm run lint
          pnpm run type-check
          pnpm run test

      - name: Run security audit
        run: pnpm audit --prod

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## What's Changed" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
            
            echo "" >> CHANGELOG.md
            echo "## New Contributors" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get new contributors
            git log --pretty=format:"%an" $PREVIOUS_TAG..HEAD | sort -u | while read contributor; do
              echo "- @$contributor" >> CHANGELOG.md
            done
            
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first release of WikiGaiaLab! 🎉" >> CHANGELOG.md
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            apps/web/.next/static/**/*
            README.md
            CHANGELOG.md

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: create-release
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: '--prod'

      - name: Update production database
        run: |
          echo "🗄️ Database migrations will be applied automatically"
          # Add database migration commands here if needed

  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          echo "📚 Documentation updated for release ${{ github.ref_name }}"
          # Add documentation update commands here

      - name: Notify team
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = '${{ github.ref_name }}';
            
            // Create a discussion post about the release
            const body = `## 🎉 Release ${tag} is Live!
            
            We're excited to announce that WikiGaiaLab ${tag} has been released and deployed to production!
            
            ### 🔗 Links
            - **Production**: https://wikigaialab.com
            - **Release Notes**: https://github.com/${owner}/${repo}/releases/tag/${tag}
            - **Changelog**: See the release notes above
            
            ### 🧪 Testing
            Please help us test the new features and report any issues you encounter.
            
            ### 🙏 Thank You
            Thanks to all contributors who made this release possible!
            
            ---
            *This release was automatically deployed via GitHub Actions.*`;
            
            // You could also send notifications to Discord, Slack, etc.
            console.log('🚀 Release notification sent!');

      - name: Create next milestone
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const currentVersion = '${{ github.ref_name }}';
            
            // Parse current version and create next patch version
            const version = currentVersion.replace('v', '');
            const [major, minor, patch] = version.split('.');
            const nextPatch = parseInt(patch) + 1;
            const nextVersion = `v${major}.${minor}.${nextPatch}`;
            
            try {
              await github.rest.issues.createMilestone({
                owner,
                repo,
                title: nextVersion,
                description: `Next patch release after ${currentVersion}`,
                due_on: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now
              });
              
              console.log(`✅ Created milestone for ${nextVersion}`);
            } catch (error) {
              console.log(`⚠️ Could not create milestone: ${error.message}`);
            }

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "🔄 Rolling back deployment due to failure"
          # Add rollback commands here
          
      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = '${{ github.ref_name }}';
            
            github.rest.issues.create({
              owner,
              repo,
              title: `🚨 Release ${tag} Rollback Required`,
              body: `## 🚨 Release Rollback Alert
              
              The release ${tag} has failed and needs to be rolled back.
              
              ### 🔍 Details
              - **Tag**: ${tag}
              - **Workflow**: ${context.workflow}
              - **Run**: ${context.runId}
              
              ### 🔧 Action Required
              - [ ] Investigate the failure
              - [ ] Fix the issues
              - [ ] Create a new release
              - [ ] Update documentation
              
              ### 📋 Rollback Checklist
              - [ ] Production deployment rolled back
              - [ ] Database changes reverted (if necessary)
              - [ ] CDN cache cleared
              - [ ] Monitoring alerts acknowledged
              - [ ] Team notified
              
              ---
              *This issue was created automatically by the release workflow.*`,
              labels: ['critical', 'rollback', 'release']
            });

  health-check:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Check production health
        run: |
          urls=(
            "https://wikigaialab.com/api/health"
            "https://wikigaialab.com"
            "https://wikigaialab.com/problems"
          )
          
          for url in "${urls[@]}"; do
            echo "🔍 Checking $url"
            if curl -f --retry 3 --retry-delay 5 --max-time 30 "$url" > /dev/null 2>&1; then
              echo "✅ $url is healthy"
            else
              echo "❌ $url is not responding"
              exit 1
            fi
          done
          
          echo "🎉 All health checks passed!"

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests..."
          # Add smoke test commands here
          echo "✅ Smoke tests passed!"